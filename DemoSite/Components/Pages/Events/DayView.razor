@using DemoApiLib.Models.ApiModels
@using System.Globalization

<div class="day-view">
    @if (ShowTime == true)
    {
        <div class="time-column">
            @for (int hour = 6; hour <= 20; hour++)
            {
                <div class="hour">@($"{hour:D2}:00")</div>
            }
        </div>
        <div class="separator"></div>
    }
    <div class="events-column">
        <div class="grid">
            @for (int hour = 6; hour <= 20; hour++)
            {
                <div class="hour-line"></div>
                @for (int minute = 10; minute < 60; minute += 10)
                {
                    <div class="minute-line" style="top: @((hour - 6) * 60 + minute)px;"></div>
                }
            }
        </div>
        @foreach (var evt in ProcessedEvents)
        {
            <div class="event @evt.Event.Eventtype.ToLower()" style="@GetEventStyle(evt)">
                <div class="event-title">@evt.Event.Title</div>
                <div class="event-time">@evt.Event.StartTime.ToString("HH:mm") - @evt.Event.EndTime.ToString("HH:mm")</div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public DateOnly CurrentDate { get; set; }// DateOnly.FromDateTime(DateTime.Today);

    [Parameter]
    public bool ShowTime { get; set; }

    [Parameter]
    public List<EventModel> Events { get; set; }

    private List<ProcessedEvent> ProcessedEvents { get; set; }

    private class ProcessedEvent
    {
        public EventModel Event { get; set; }
        public int OverlapIndex { get; set; }
    }
    protected override void OnParametersSet()
    {
        ProcessedEvents = ProcessEventsForOverlap(Events);
    }

    private string GetEventStyle(ProcessedEvent evt)
    {
        var start = (evt.Event.StartTime.Hour - 6) * 60 + evt.Event.StartTime.Minute;
        var duration = (evt.Event.EndTime.Hour * 60 + evt.Event.EndTime.Minute) - (evt.Event.StartTime.Hour * 60 + evt.Event.StartTime.Minute);
        var left = evt.OverlapIndex * 20; // 20% width for each overlapping event
        var width = 100 - left;
        return $"top: {start}px; height: {duration}px; background-color: {evt.Event.Eventtype}; left: {left}%; width: {width}%;";
    }

    private List<ProcessedEvent> ProcessEventsForOverlap(List<EventModel> events)
    {
        var processedEvents = new List<ProcessedEvent>();
        var sortedEvents = events.OrderBy(e => e.StartTime).ToList();

        for (int i = 0; i < sortedEvents.Count; i++)
        {
            var currentEvent = sortedEvents[i];
            var overlapIndex = 0;

            for (int j = 0; j < i; j++)
            {
                if (DoEventsOverlap(currentEvent, sortedEvents[j]))
                {
                    overlapIndex++;
                }
            }

            processedEvents.Add(new ProcessedEvent { Event = currentEvent, OverlapIndex = overlapIndex });
        }

        return processedEvents;
    }

    private bool DoEventsOverlap(EventModel evt1, EventModel evt2)
    {
        return evt1.StartTime < evt2.EndTime && evt2.StartTime < evt1.EndTime;
    }


}