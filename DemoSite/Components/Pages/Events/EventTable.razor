@page "/events"
@using DemoApiLib
@using DemoApiLib.Models.ApiModels
@using DemoSite.Content.Forms
@inject DemoApiClientService apiClient
@inject NavigationManager NavigationManager

<h3>Event List</h3>

@if (events == null)
{
    <p>Loading...</p>
}
else if (!events.Any())
{
    <p>No events found.</p>
    <button type="button" class="btn btn-primary" @onclick="ShowAddEventModal">Add Event</button>
}
else
{
    <button type="button" class="btn btn-primary mb-3" @onclick="ShowAddEventModal">Add Event</button>
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Date</th>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Event Type</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var evt in events)
            {
                <tr>
                    <td>@evt.Title</td>
                    <td>@evt.EventDate.ToString("d")</td>
                    <td>@evt.StartTime.ToString("t")</td>
                    <td>@evt.EndTime.ToString("t")</td>
                    <td>@evt.Eventtype</td>
                    <td>@evt.Description</td>
                    <td>
                        <button class="btn btn-secondary btn-sm" @onclick="() => ShowEditEventModal(evt)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => Delete(evt.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (isModalVisible)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">EventForm</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EventForm events="@currentEvent" OnUserSaved="@HandleEventsSaved" />
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}




@code {
    private List<EventModel>? events;
    private EventModel addEventModel = new();
    private EventModel currentEvent = new();
    private bool isModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        events = await apiClient.GetAllEvents();
    }

    private async Task Delete(Guid eventId)
    {
        await apiClient.DeleteEvent(eventId);
        await LoadEvents();
    }

    private async Task HandleEventsSaved(bool success)
    {
        if (success)
        {
            isModalVisible = false;
            await LoadEvents();
        }
        else
        {
            // Handle unsuccessful save
            // You might want to keep the modal open and display an error message
        }
    }

    private void ShowAddEventModal()
    {
        currentEvent = new EventModel();
        isModalVisible = true;
    }

    private void ShowEditEventModal(EventModel evt)
    {
        currentEvent = evt;
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }
}