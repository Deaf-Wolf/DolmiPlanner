@page "/schedulesview"
@using DemoApiLib.Models.ApiModels
@using DemoSite.Content.Scheduler
@inject NavigationManager NavigationManager

<button class="btn btn-primary" @onclick="Decase">@DecaseLabel</button>
<h1 style="text-align:center">Schedules</h1>
<button class="btn btn-primary" @onclick="Incase">@IncaseLabel</button>
<br />
<WeekView DateMax="dateMax" StartDate="@startDate" />

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "date")]
    public string? DateParam { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "dateMax")]
    public int? DateMaxParam { get; set; }

    private int dateMax = 7;
    private DateOnly startDate;
    private DateOnly currentDate = DateOnly.FromDateTime(DateTime.Today).AddDays(1 - (int)DateTime.Today.DayOfWeek);
    private string IncaseLabel = "Nächste Woche";
    private string DecaseLabel = "Vergangene Woche";

    protected override void OnInitialized()
    {
        if (DateParam != null && DateOnly.TryParse(DateParam, out var parsedDate))
        {
            startDate = parsedDate;
            IncaseLabel = "Nächster Tag";
            DecaseLabel = "Vergangener Tag";
        }
        else
        {
            startDate = currentDate;
        }

        if (DateMaxParam.HasValue)
        {
            dateMax = DateMaxParam.Value;
        }
    }

    private void Incase()
    {
        if (dateMax != 7)
        {
            startDate = startDate.AddDays(1);
            UpdateUrl();
        }
        else
        {
            startDate = startDate.AddDays(7);
        }
       
    }

    private void Decase()
    {
        if (dateMax != 7)
        {
            startDate = startDate.AddDays(-1);
            UpdateUrl();
        }
        else
        {
            startDate = startDate.AddDays(-7);
        }
        
    }

    private void UpdateUrl()
    {
        NavigationManager.NavigateTo($"/schedulesview?date={startDate}&dateMax={dateMax}", forceLoad: false);
    }

// Not Used bu Useful
//    private static int ClampValue(int input, int min, int max)
//    {
//        if (input < min) return min;
//        if (input > max) return max;
//        return input;
//    }
}

