@page "/users"
@using DemoApiLib
@using DemoApiLib.Models.ApiModels
@using DemoSite.Content.Modals
@using DemoSite.Content.Modals.Forms

@inject DemoApiClientService apiClient

<h3>Users</h3>

@if (users == null)
{
    <p>Loading...</p>
}
else
{

    <button class="btn btn-primary" @onclick="ShowAddUserModal">Add User</button>


    <table class="table">
        <thead>
            <tr>
                <th>GUID</th>
                <th>Username</th>
                <th>Email</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Guid</td>
                    <td>@user.UserName</td>
                    <td>@user.Password</td>
                    <td>@user.Email</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => ShowEditUserModal(user)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user.Guid)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal IsVisible="@isModalVisible" IsVisibleChanged="@(v => isModalVisible = v)">
    <UserForm User="@currentUser" OnUserSaved="@HandleUserSaved" />
</Modal>

@code {
    private List<User>? users;
    private User addUserModel = new();
    private User currentUser = new();
    private bool isModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await apiClient.GetUsers();

    }

    private void ShowAddUserModal()
    {
        currentUser = new User();
        isModalVisible = true;
    }

    private void ShowEditUserModal(User user)
    {
        currentUser = user;
        isModalVisible = true;
    }

    private async Task HandleUserSaved(bool success)
    {
        if (success)
        {
            isModalVisible = false;
            await LoadUsers();
        }
        else
        {
            // Handle unsuccessful save
            // You might want to keep the modal open and display an error message
        }
    }


    private async Task DeleteUser(Guid guid)
    {
        await apiClient.DeleteUser(guid);
        await LoadUsers();
    }


}