@page "/clients"
@using DemoApiLib.Models.ApiModels
@using DemoSite.Content.Forms
@using DemoSite.Content.Modals

<h3>Clients Table</h3>

@if (Clients == null)
{
    <p>Loading...</p>
}
else if (!Clients.Any())
{
    <p>No clients found.</p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="ShowAddClientModal">Add Client</button>
    <table class="table">
        <thead>
            <tr>
                <th>GUID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Preferred Contact</th>
                <th>Sign Language</th>
                <th>Address</th>
                <th>City</th>
                <th>Postal Code</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in Clients)
            {
                <tr>
                    <td>@client.Id</td>
                    <td>@client.FirstName</td>
                    <td>@client.LastName</td>
                    <td>@client.Email</td>
                    <td>@client.Phone</td>
                    <td>@client.PreferredContactMethod</td>
                    <td>@client.PreferredSignLanguage</td>
                    <td>@client.StreetAddress</td>
                    <td>@client.City</td>
                    <td>@client.PostalCode</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => ShowEditClientModal(client)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteClient(client)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal @bind-IsVisible="@isModalVisible">
    <ClientForm Client="@currentClient" OnClientSaved="@HandleClientSaved" />
</Modal>

@code {
    private List<ClientsModel> Clients = new();
    private ClientsModel currentClient = new();
    private bool isModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
    }

    private async Task LoadClients()
    {
        // Simulate API call delay
        await Task.Delay(1000);

        // Add a sample client if the list is empty
        if (!Clients.Any())
        {
            Clients.Add(new ClientsModel
            {
                Id = Guid.NewGuid(),
                FirstName = "Random",
                LastName = "Opfer",
                Email = "RandomOpfer@Opfermail.op",
                Phone = "+49 999 9999",
                PreferredSignLanguage = "IS"
            });
        }
    }

    private void ShowAddClientModal()
    {
        currentClient = new ClientsModel();
        isModalVisible = true;
    }

    private void ShowEditClientModal(ClientsModel client)
    {
        currentClient = client;
        isModalVisible = true;
    }

    private async Task HandleClientSaved(bool success)
    {
        if (success)
        {
            isModalVisible = false;
            if (!Clients.Contains(currentClient))
            {
                Clients.Add(currentClient);
            }
            await LoadClients();
        }
    }

    private async Task DeleteClient(ClientsModel client)
    {
        Clients.Remove(client);
        await LoadClients();
    }
}