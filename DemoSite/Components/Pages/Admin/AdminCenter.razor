@page "/admin-center"
@using System.Text.Json
@inject IJSRuntime JSRuntime

<h3>Admin Center</h3>

<div class="card">
    <div class="card-header">
        <h4>Event Types</h4>
    </div>
    <div class="card-body">
        <div class="form-group">
            <label for="eventTypeName">Event Type Name</label>
            <input type="text" class="form-control" id="eventTypeName" @bind="newEventTypeName" />
        </div>
        <div class="form-group">
            <label for="eventTypeColor">Event Type Color</label>
            <input type="color" class="form-control" id="eventTypeColor" @bind="newEventTypeColor" />
        </div>
        <button class="btn btn-primary" @onclick="AddEventType">Add Event Type</button>

        @if (_loading)
        {
            <p>Loading...</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Color</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var eventType in eventTypes)
                    {
                        <tr>
                            <td>@eventType.Name</td>
                            <td>
                                <span class="color-preview" style="background-color: @eventType.Color;"></span>
                                @eventType.Color
                            </td>
                            <td>
                                <button class="btn btn-sm btn-secondary" @onclick="() => EditEventType(eventType)">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteEventType(eventType)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@if (showEditModal)
{
    <div class="modal" style="display:block" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Event Type</h5>
                    <button type="button" class="close" @onclick="CloseEditModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="editEventTypeName">Name</label>
                        <input type="text" class="form-control" id="editEventTypeName" @bind="editingEventType.Name" />
                    </div>
                    <div class="form-group">
                        <label for="editEventTypeColor">Color</label>
                        <input type="color" class="form-control" id="editEventTypeColor" @bind="editingEventType.Color" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveEditedEventType">Save changes</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .color-preview {
        display: inline-block;
        width: 20px;
        height: 20px;
        margin-right: 5px;
        border: 1px solid #ddd;
    }
    .modal {
        background-color: rgba(0,0,0,0.4);
    }
</style>

@code {
    private List<EventType> eventTypes = new List<EventType>();
    private string newEventTypeName = "";
    private string newEventTypeColor = "#000000";
    private bool _loading = false;
    private bool showEditModal = false;
    private EventType editingEventType = new EventType();

    protected override async Task OnInitializedAsync()
    {
        await LoadEventTypes();
    }

    private async Task LoadEventTypes()
    {
        _loading = true;
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "eventTypes");
            if (!string.IsNullOrEmpty(json))
            {
                eventTypes = JsonSerializer.Deserialize<List<EventType>>(json);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading event types: {ex.Message}");
        }
        _loading = false;
    }

    private async Task SaveEventTypes()
    {
        try
        {
            var json = JsonSerializer.Serialize(eventTypes);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "eventTypes", json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving event types: {ex.Message}");
        }
    }

    private async Task AddEventType()
    {
        if (string.IsNullOrWhiteSpace(newEventTypeName) || string.IsNullOrWhiteSpace(newEventTypeColor))
        {
            return;
        }

        eventTypes.Add(new EventType { Name = newEventTypeName, Color = newEventTypeColor });
        await SaveEventTypes();
        newEventTypeName = "";
        newEventTypeColor = "#000000";
    }

    private void EditEventType(EventType eventType)
    {
        editingEventType = new EventType { Name = eventType.Name, Color = eventType.Color };
        showEditModal = true;
    }

    private async Task DeleteEventType(EventType eventType)
    {
        eventTypes.Remove(eventType);
        await SaveEventTypes();
    }

    private void CloseEditModal()
    {
        showEditModal = false;
    }

    private async Task SaveEditedEventType()
    {
        var eventTypeToUpdate = eventTypes.FirstOrDefault(et => et.Name == editingEventType.Name);
        if (eventTypeToUpdate != null)
        {
            eventTypeToUpdate.Color = editingEventType.Color;
            await SaveEventTypes();
        }
        showEditModal = false;
    }

    private class EventType
    {
        public string Name { get; set; }
        public string Color { get; set; }
    }
}
