@using DemoApiLib
@using DemoApiLib.Models.ApiModels
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject DemoApiClientService apiClient

<EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="user.UserName" />
        <ValidationMessage For="@(() => user.UserName)" />
    </div>
    <div class="mb-3">
        <label for="firstname" class="form-label">First Name</label>
        <InputText id="firstname" class="form-control" @bind-Value="user.FirstName" />
        <ValidationMessage For="@(() => user.FirstName)" />
    </div>
    <div class="mb-3">
        <label for="lastname" class="form-label">Last Name</label>
        <InputText id="lastname" class="form-control" @bind-Value="user.LastName" />
        <ValidationMessage For="@(() => user.LastName)" />
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="user.Email" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="user.Password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    [Parameter] public User user { get; set; } = new();
    [Parameter] public EventCallback<bool> OnUserSaved { get; set; }
    private string errorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;
        try
        {
            HttpResponseMessage response;
            if (user.Guid == Guid.Empty)
            {
                response = await apiClient.AddUser(user);
            }
            else
            {
                response = await apiClient.UpdateUser(user.Guid, user);
            }
            if (response.IsSuccessStatusCode)
            {
                await OnUserSaved.InvokeAsync(true);
            }
            else
            {
                errorMessage = $"API Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}